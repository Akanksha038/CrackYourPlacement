Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1




solution:


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        // int n=nums.size();
        // if(n==0|| n==1)
        //  return;
        // int temp;
        // int lp=0,rp=0;
        // while(rp<n){
        //     if(nums[rp]==0)
        //         ++rp;
        //      else
        //     temp=nums[lp];
        //     nums[lp]=nums[rp];
        //     nums[rp]=temp;
        //     ++lp;
        //     ++rp;
        // }


          
        int n = nums.size();
        if(n==0 || n==1)
            return;
        
        int left=0, right=0;
        int temp;
        //Rearrangement
        while(right < n)
        {
            if(nums[right]==0)
                ++right;
            else
            {
                temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                ++left;
                ++right;
            }
        }
        
    }
};
