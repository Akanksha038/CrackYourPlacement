75. Sort Colors
Medium

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.


*******************************************solution******************************************
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        // 1st way
        int zero=0,one=0,two=0;
        for(int i=0;i<n;i++)
        {
          if(nums[i]==0){
            zero++;
          }
          else if(nums[i]==1){
            one++;
          }
          else
          two++;
        }

        for(int i=0;i<zero;i++){
           nums[i]=0;
         }
          for(int i=zero;i<zero+one;i++){
           nums[i]=1;
         }
         for(int i=zero+one;i<zero+one+two;i++){
           nums[i]=2;
         }

        // 2nd way

        // int low=0,high=n-1,middle=0;
        // while(middle<=high)
        // {
        //   if(nums[middle]==0)
        //   {
        //     swap(nums[low],nums[middle]);
        //     low++;
        //     middle++;
        //   }
        //   else if(nums[middle]==1)
        //   {
        //       middle++;
        //   }
        //       else
        //       {
        //       swap(nums[high],nums[middle]);
        //       high--;
        //       }
        //   }
        }

            
    };
