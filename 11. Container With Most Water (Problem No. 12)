1. Container With Most Water
Medium

Companies
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104



******************************************************************SOLUTION**********************************************************************
class Solution {
public:
    int maxArea(vector<int>& height) {
        // int area = 0;
        int len = height.size();

        // ***********************having time Complexity=O(N^2)  and Space Complexity=O(1);
    // for (int i = 0; i < len; i++) {
    //     for (int j = i + 1; j < len; j++) {
    //     //     // Calculating the max area
    //     //     area = max(area, min(height[j], height[i]) * (j - i));/
    //       int width=abs(i-j);
    //       int heights =min(height[i],height[j]);
    //       area=max(area,width*heights);



    //     }

    // }
    // return area;



    // ******************this solution having TC=O(n) and Space Complexity O(1)

        int i=0,j=len-1;
        int ans=0;

         while(i<j){
             int heights=min(height[i],height[j]);
            int  width=j-i;
             int area=heights*width;
             if(height[i]<height[j]){
                 i++;
             }
             else j--;
        
     ans=max(ans,area);
         }
         return ans;

        
    }
};
